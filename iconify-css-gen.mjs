import { promises as fs } from 'fs'
import { join, basename } from 'path'
import { parseSVGContent } from '@iconify/utils/lib/svg/parse.mjs'
import { iconToSVG } from '@iconify/utils/lib/svg/build.mjs'

const ICONS_DIR = 'icons'
const OUTPUT_JSON = 'iconify-icons.json'
const OUTPUT_CSS = 'iconify-icons.css'
const CSS_PREFIX = 'iconify'

// 1. 读取所有 svg 文件
const files = (await fs.readdir(ICONS_DIR)).filter(f => f.endsWith('.svg'))
const iconSet = {
  prefix: 'myicon',
  icons: {},
  width: 24,
  height: 24
}

for (const file of files) {
  const svgRaw = await fs.readFile(join(ICONS_DIR, file), 'utf-8')
  // 2. 替换 fill/stroke 为 currentColor
  const svg = svgRaw.replace(/(fill|stroke)="(#[0-9a-fA-F]{3,6}|[a-zA-Z]+)"/g, '$1="currentColor"')
  // 3. 解析 SVG
  const parsed = parseSVGContent(svg)
  if (!parsed) continue
  // 4. 组装 icon set，文件名转下划线
  let name = basename(file, '.svg').replace(/[^a-zA-Z0-9_-]/g, '_')
  iconSet.icons[name] = {
    body: parsed.body,
    width: 24,
    height: 24
  }
}
await fs.writeFile(OUTPUT_JSON, JSON.stringify(iconSet, null, 2))

// 5. 生成 CSS
let css = `/* Generated by iconify-css-gen.mjs */\n.${CSS_PREFIX} { display: inline-block; width: 1em; height: 1em; vertical-align: -0.125em; fill: currentColor; }\n`
for (const name in iconSet.icons) {
  const svgObj = iconToSVG(iconSet.icons[name], { width: '1em', height: '1em' })
  const svgStr = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"${svgObj.attributes.viewBox}\">${svgObj.body}</svg>`
  css += `.${CSS_PREFIX}-${name}::before { content: ''; display: inline-block; width: 1em; height: 1em; background: none; mask: url('data:image/svg+xml;utf8,${encodeURIComponent(svgStr)}') no-repeat center/contain; -webkit-mask: url('data:image/svg+xml;utf8,${encodeURIComponent(svgStr)}') no-repeat center/contain; background-color: currentColor; }\n`
}
await fs.writeFile(OUTPUT_CSS, css)

console.log('Iconify icon set & css generated.') 
